<?php

/**
 * PluginGallery
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    sfMultipleAjaxUploadGalleryPlugin
 * @subpackage model
 * @author     leny
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
DEFINE("UPLOAD_DIR", sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_path_gallery"));
DEFINE("WEB_DIR", sfConfig::get("sf_web_dir"));
DEFINE("CORRECT_PATH", substr(UPLOAD_DIR, strlen(WEB_DIR), strlen(UPLOAD_DIR) - strlen(WEB_DIR)));

abstract class PluginGallery extends BaseGallery {

    public function save(Doctrine_Connection $conn = null) {
        if(!$this->isNew()){
            $oldSlug = Doctrine::getTable("Gallery")->find($this->getId())->getSlug();
            rename(sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_path_gallery") . $oldSlug . '/',
                    sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_path_gallery") . SfMaugUtils::slugify($this->getTitle()) . '/');
        }
        parent::save($conn);
    }

    public function  delete(Doctrine_Connection $conn = null) {
        parent::delete($conn);
        if(sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_onDelete")== "cascade")
        {
            $this->RemoveFolder(sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_path_gallery").$this->getSlug().'/');
        }
    }

    public function RemoveFolder($dir){
        $handle = opendir($dir);
        while($elem = readdir($handle))
        {
            if(is_dir($dir.'/'.$elem) && substr($elem, -2, 2) !== '..' && substr(
                    $elem, -1, 1) !== '.')
            {
                $this->RemoveFolder($dir.'/'.$elem);
            }
            else
            {
                if(substr($elem, -2, 2) !== '..' && substr($elem, -1, 1) !== '.')
                {
                    unlink($dir.'/'.$elem);
                }
            }
        }

        $handle = opendir($dir);
        while($elem = readdir($handle))
        {
            if(is_dir($dir.'/'.$elem) && substr($elem, -2, 2) !== '..' && substr(
                    $elem, -1, 1) !== '.')
            {
                $this->RemoveFolder($dir.'/'.$elem);
                rmdir($dir.'/'.$elem);
            }
        }
        rmdir($dir);
    }

    public function setPhotoDefaut($photoId) {
        Doctrine_Query::create()
                ->update('Photos p')
                ->set('p.is_default', '?', false)
                ->where('p.gallery_id = ?', $this->getId())
                ->execute();

        Doctrine_Query::create()
                ->update('Photos p')
                ->set('p.is_default', '?', true)
                ->andWhere('p.id = ?', $photoId)
                ->execute();

        return true;
    }

    public function getPhotoDefault() {
        $default = Doctrine::getTable('Photos')->getDefault($this->getId());
        if (!$default instanceof Photos) {
            $default = new Photos();
        }

        return $default->getPicpath() == "" ?
                sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_defaultPicture") :
                CORRECT_PATH . $this->getSlug() . "/" . sfConfig::get("app_sfMultipleAjaxUploadGalleryPlugin_portfolio_thumbnails_size") . "/" . $default->getPicpath();
    }

    public function getPhotos() {
        return Doctrine_Query::create()
                ->from('Photos p')
                ->where('p.gallery_id = ?', $this->getId())
                ->orderBy('.order_photo ASC')
                ->execute();
    }

    public static function getAllGalleries() {
        return Doctrine::getTable('Gallery')->createQuery('g')
//                ->leftJoin('g.Translation t WITH t.lang = ?', sfContext::getInstance()->getUser()->getCulture())
                ->where('g.is_active = ?', true)->execute();
    }

    public static function getGalleriesPager($limit) {
        $query = Doctrine::getTable('Gallery')->createQuery('g')
//                        ->leftJoin('g.Translation t WITH t.lang = ?', sfContext::getInstance()->getUser()->getCulture())
                        ->where('g.is_active = ?', true);
        $pager = new sfDoctrinePager('Gallery', $limit);
        $pager->setQuery($query);
        $pager->setPage(sfContext::getInstance()->getRequest()->getParameter('page', 1));
        $pager->init();

        return $pager;
    }

    public static function getNbGalleries($nb = 0) {
        return Doctrine_Query::create()
                ->from('Gallery')->orderBy('updated_at DESC')
//                ->leftJoin('g.Translation t WITH t.lang = ?', sfContext::getInstance()->getUser()->getCulture())
                ->limit($nb)
                ->execute();
    }

}
